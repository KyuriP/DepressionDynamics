---
title: "Example: Study on Dynamics of Depression"
subtitle: "This is an illustrative example to convey the concept of the study, focusing on the dynamics of depression using mechanistic models and statistical network models."
format: 
  html:
    toc: true
    code-fold: true
    code-summary: "Show the code"
    embed-resources: true
editor: visual
theme: cosmo  
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE)
# install packages
library(modelr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(patchwork)
library(qgraph)
library(psychonetrics)
library(gganimate)

source("euler_stochastic2.R")
```

## 1. Toy example

![](toymodel_mockup2.png){fig-align="center" width="70%"}

$$dS_{it} = S_i(1-S_i)(\beta_i + \alpha_i S_i + \alpha_{ij}S_j(1+\delta_i f(S_i)) dt + dW_t$$

-   $\beta_i + \alpha_i$: resilience of $S_i$ (for the deactivated state).
-   $\delta$: amplifying scaling factor given high activation level of $S_i$.
-   $\alpha_{ij}$: effect of other symptoms on $S_i$.
-   $f(x) = x^5$: such that $S_i$ gets a boost (scaled by $\delta$) as its activation level goes up.

## 2. Simulating mechanism

-   Before shock: $[\beta_i^{pre}] = [-0.6, -0.3, -0.7], [\alpha_i^{pre}] = [-0.3, -0.2, -0.4], [\delta_i^{pre}] = [0.3, 0.3, 0.3]$
-   After shock: $[\beta_i^{post}] = [0.6, 0.3, 0.7], [\alpha_i^{post}] = [\alpha_i^{pre}], [\delta_i^{post}] = [\delta_i^{pre}]$
-   *To-do*: When data available, specify a shock term and its effect more specific and incorporate that in the model. Estimate the parameter values with the data such that the model can retrieve the correlations.

```{r}
#| fig-height: 10
#| results: false

# function for boosting effect of other symptoms when symptom level is high enough
f <- function(x) x^5

# define differntial equations:
det_eq <- c(
  dSA ~ SA*(1-SA)*(bA + aA*SA + SC*(1+ dA*f(SA))),
  dSB ~ SB*(1-SB)*(bB + aB*SB + SA*(1+ dB*f(SB))),
  dSC ~ SC*(1-SC)*(bC + aC*SC + SB*(1+ dC*f(SC)))
)

# give noise:
sto_eq <-  c(dSA ~ .1,
             dSB ~ .1,
             dSC ~ .1)

# define the parameters (as a named vector):
## original params ##
parms1 <- c(bA = -.6, bB = -.3, bC = -.7, 
           aA = -.3, aB = -.2, aC = -.4, 
           dA = .3, dB = .3, dC = .3)

## given shock ##
parms2 <- c(bA = .6, bB = .3, bC = .7, 
            # aA = 0, aB = 0, aC = , 0
            aA = -.3, aB = -.2, aC = -.4, 
            dA = .3, dB = .3, dC = .3)

  
# define the initial condition (as a named vector):
init <- c(SA = 0.3, SB = 0.5, SC= 0.8)

# define deltaT and the number of time steps:
deltaT <- .1 # timestep length
n_steps <- 1500 # must be a number greater than 1

# specify the standard deviation of the stochastic noise
D_stoeq1 <- 0.1 # before shock
D_stoeq2 <- 0.5 # after shock
t_shock <- 500 
shock_duration <- 50
  
set.seed(678) # set the seed (system's behavior varies much by random noise)
# simulate :
# > shock given at t = 500
# > shock --> change b and noise S.D.
# > shock duration = 50
# > after shock --> revert back to original parameters but noise S.D. remains larger (debating... reasonable?)

sde_out <- euler_stochastic2(
  deterministic_rate = det_eq,
  stochastic_rate = sto_eq,
  initial_condition = init,
  parameters1 = parms1,
  deltaT = deltaT,
  n_steps = n_steps,
  D1 = D_stoeq1,
  D2 = D_stoeq2,
  shock = TRUE,
  parameters2 = parms2, 
  t_shock = t_shock, 
  duration = shock_duration
)

shock_period <- data.frame(time = 0:n_steps*deltaT) |>
  mutate(shock = ifelse(time >= t_shock * deltaT & time <= (t_shock+shock_duration)*deltaT, TRUE, FALSE))

# each symptom level
p1 <- sde_out |>
  mutate(totalsymptom = SA + SB + SC) |>
  tidyr::pivot_longer(!c(t, totalsymptom), names_to = "symptoms") |>
  ggplot() +
  geom_line(aes(x = t, y = value, color = symptoms), alpha = 0.5) +
  geom_area(data = shock_period, aes(x = time, y = shock*max(sde_out[,-1])
  ), inherit.aes = FALSE, fill = "orange", alpha = 0.2) +
  # geom_line(aes(x = t, y = totalsymptom)) +
  labs(y = "", title ="Each symptom level") +
  theme_classic() +
  theme(legend.position="bottom") 


# total symptom level
p2 <- sde_out |>
  mutate(totalsymptom = SA + SB + SC) |>
  ggplot(aes (x = t, y = totalsymptom)) +
  geom_line(col = "salmon") +
  geom_area(data = shock_period, aes(x = time, y = shock*max(sde_out[,-1])*ncol(sde_out[,-1])
  ), inherit.aes = FALSE, fill = "orange", alpha = 0.2) +
  labs(y = "", title = "Total symptom level") +
  theme_classic()


# patchwork
p1 / p2

```


## 3. Statistical network estimation

```{r, message = FALSE}
## fitting statistical networks:
beforeshock <- sde_out |> filter(t > 25 & t < 49.9) |> select(!t)
aftershock <- sde_out |> filter(t >=49.9) |> select(!t)

layout(t(1:2))
beforeGGM <- qgraph(cor_auto(beforeshock),
       graph = 'glasso',
       layout = 'spring',
       theme = 'colorblind',
       sampleSize = nrow(beforeshock),
       title = "beforeGGM")
# fix layout
L <- beforeGGM$layout

afterGGM <- qgraph(cor_auto(aftershock),
       graph = 'glasso',
       theme = 'colorblind',
       sampleSize = nrow(aftershock),
       title = "afterGGM",
       layout = L)

# layout(t(1:2))
# before <- gvar(beforeshock, estimator="FIML") %>% runmodel
# beforeGVAR <- getmatrix(before, "PDC") |> 
#   qgraph(theme = "colorblind", directed=TRUE, diag=TRUE,
#        title = "beforeGVAR", labels = c("SA", "SB", "SC"),
#        layout = L)
# 
# after <- gvar(aftershock, estimator="FIML") %>% runmodel
# afterGVAR <- getmatrix(after, "PDC") |>
#   qgraph(theme = "colorblind", directed=TRUE, diag=TRUE,
#        title = "afterGVAR", labels = c("SA", "SB", "SC"),
#        layout = L)
```
